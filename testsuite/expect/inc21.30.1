############################################################################
# Purpose: Test of SLURM functionality
#          to be called from test21.30
#          Tests if the group nodes limit is enforced
############################################################################
# Copyright (C) 2012 SchedMD LLC
# Written by Nathan Yee <nyee32@schedmd.com>
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################

proc inc21_30_1 {} {

#test GrpNode limit

	global srun salloc acct bin_sleep number
	global exit_code

	set job_id1  0
	set job_id2  0
	set job_id3  0
	spawn $salloc -N1 -t1 --account=$acct --exclusive $srun $bin_sleep 10
	expect {
		-re "Granted job allocation ($number)" {
			set job_id1 $expect_out(1,string)
			send_user "\njob $job_id1 has been submitted\n"
		}
		timeout {
			send_user "\nFAILURE: salloc is not reponding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if {$job_id1 == 0} {
		send_user "\nFAILURE: jobs were not submitted\n"
		exit 1
	}

	spawn $salloc -N1 -t1 --account=$acct $srun $bin_sleep 10
	expect {
		-re "Granted job allocation ($number)" {
			set job_id2 $expect_out(1,string)
			send_user "\njob $job_id2 has been submitted\n"
		}
		-re "job ($number)" {
			set job_id2 $expect_out(1,string)
			send_user "\nJob $job_id2 is waiting for resources. This is expected.\n"
		}
		timeout {
			send_user "\nFAILURE: salloc is not reponding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if {$job_id2 == 0} {
		send_user "\nFAILURE: jobs were not submitted\n"
		cancel_job $job_id1
		exit 1
	}

	spawn $salloc -N1 -t1 --account=$acct $srun $bin_sleep 10
	expect {
		-re "Granted job allocation ($number)" {
			set job_id3 $expect_out(1,string)
			send_user "\njob $job_id3 has been submitted\n"
		}
		-re "job ($number)" {
			set job_id3 $expect_out(1,string)
			send_user "\nJob $job_id3 is waiting for resources. This is expected.\n"
		}
		timeout {
			send_user "\nFAILURE: salloc is not reponding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if {$job_id3 == 0} {
		send_user "\nFAILURE: jobs were not submitted\n"
		cancel_job $job_id1
		cancel_job $job_id2
		exit 1
	}

	# checks the state of the job
	check_state $job_id3

	# cancels remaining jobs
	cancel_job $job_id1
	cancel_job $job_id2
	cancel_job $job_id3
}
